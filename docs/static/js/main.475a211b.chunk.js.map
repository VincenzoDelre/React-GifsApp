{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAMaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAQT,EACRU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCVlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,yDAE2CC,UAAUH,GAFrD,sDAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAE1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAgBZM,GAhBY,4CAAH,sDCCPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGrC,OACI,sBAAKc,UAAW,yCAAhB,UAEI,qBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,kCAAKA,EAAL,WCLCO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGrB,ECFwB,SAAEA,GAE1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAsBA,OAjBAC,qBAAW,WAEPxB,EAASC,GAERwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKnB,CAAEpB,IAIGqB,EDtBwBK,CAAc1B,GAAjCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAGpB,OAEI,sBAAKJ,UAAU,aAAf,UACI,mCAAOhB,EAAP,OAEEoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,OAAf,SAEIH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAGKA,GAFAA,EAAIC,aEjBhBgB,EAAe,WAExB,MAAoCzC,mBAAS,CAAC,KAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACI,kDAEA,cAAC,EAAD,CAAaA,cAAeA,IAG5B,uBAEA,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACnB,cAAC,EAAD,CAEAA,SAAYA,GADLA,Y,MClBhC6B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.475a211b.chunk.js","sourcesContent":["import React, { useState } from 'react'\n//import { GifExpertApp } from '../GifExpertApp';\nimport PropTypes from 'prop-types';\n\n\n\nexport const AddCategory = ( {setCategories}) => { //{***} desestructuro los elementos de los componentes = props.setCategories\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //console.log('Submit hecho')\n        if( inputValue.trim().length > 2) {\n\n            setCategories( cats =>  [inputValue, ...cats]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type='text'\n                value={ inputValue } //el inputvalue es el ultimo valor actualizado que la persona escribio\n                onChange ={ handleInputChange }\n            />\n        </form>\n    )\n}\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?limit=9&q=${encodeURI(category)}&api_key=B9oZs3OU5q1946S5f6U15DNvQmWWP2Ko`\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    // console.log( {id, title, url} );\n    return (\n        <div className= 'item animate__animated animate__fadeIn'>\n\n            <img src={ url } alt= {title} />\n            <p> {title} </p>\n            \n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n    \n    const {data:images, loading} = useFetchGifs( category );\n    //data:images = renombro data como images\n    \n    return (\n        \n        <div className='contenedor'>\n            <h3> { category } </h3>\n            \n            { loading && <p className='animate__animated animate__flash'>Loading...</p> }\n            \n            <div className='grid'>\n            {\n                images.map (img => (\n                    <GifGridItem \n                    key={img.id}\n                    // img={img}\n                    { ...img}\n                    />\n                ))\n            }\n            </div>\n        </div>\n        \n    )\n}\n","//los custom hooks funcionan como si fueran funtional components\n//pueden tener efectos, usar reducer, usar contextos\nimport { useState, useEffect  } from \"react\"\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect( () => {\n        \n        getGifs( category )\n\n        .then( imgs => {\n            \n            setState({\n                data: imgs,\n                loading: false,\n\n                });\n            \n        })\n    },[ category ])\n\n    \n\n    return state; // {data:[], loading:true }\n}\n","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['']);\n\n    // const handleAdd = () => {\n    //     // //setCategories( [...categories,'Pokemon'] );\n    //     // setCategories( categ =>  [...categories, 'Pokemon'])\n    // }\n\n    return (\n        <>\n            <h2>Buscador de GIFS</h2>\n\n            <AddCategory setCategories={setCategories}/>  \n            {/* Lo que envio aca (setCategories) lo voy a recibir en *** */}\n\n            <hr />\n\n            <ol>\n                {\n                    categories.map( category => \n                         <GifGrid \n                         key = {category}\n                         category = {category}\n                         />\n                    )\n                    //el key no puede ser i y tiene que ser unico\n                }\n            </ol>\n\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\nimport './index.css';\n\n\n\n\nReactDOM.render(\n  \n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}